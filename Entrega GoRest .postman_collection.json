{
	"info": {
		"_postman_id": "d5a51e8e-fdfb-4180-9832-117185911374",
		"name": "Entrega GoRest ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Automatizado-Tests",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "GET users/todos",
							"item": [
								{
									"name": "CT001-Buscar todos os todos de um usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"due_on\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"va_id\", jsonData[1].id);",
													"      pm.collectionVariables.set(\"va_user_id\", jsonData[1].user_id);",
													"      pm.collectionVariables.set(\"va_title\", jsonData[1].title);",
													"      pm.collectionVariables.set(\"va_due_on\", jsonData[1].due_on);        ",
													"      pm.collectionVariables.set(\"va_status\", jsonData[1].status);        ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos"
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT002-Buscar um usuário específico - id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{va_user_id}}/todos?id={{va_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{va_user_id}}",
												"todos"
											],
											"query": [
												{
													"key": "id",
													"value": "{{va_id}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT003-Filtrar pelo user_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{va_user_id}}/todos",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{va_user_id}}",
												"todos"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT004-Filtrar pelo title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"due_on\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"va_id\", jsonData[1].id);",
													"      pm.collectionVariables.set(\"va_user_id\", jsonData[1].user_id);",
													"      pm.collectionVariables.set(\"va_title\", jsonData[1].title);",
													"      pm.collectionVariables.set(\"va_due_on\", jsonData[1].due_on);        ",
													"      pm.collectionVariables.set(\"va_status\", jsonData[1].status);        ",
													"});",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{va_user_id}}/todos?title={{va_title}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{va_user_id}}",
												"todos"
											],
											"query": [
												{
													"key": "title",
													"value": "{{va_title}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT005-Filtrar pelo due_on",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{va_user_id}}/todos?due_on={{va_due_on}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{va_user_id}}",
												"todos"
											],
											"query": [
												{
													"key": "due_on",
													"value": "{{va_due_on}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT006-Filtrar pela status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{va_user_id}}/todos?status={{va_status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{va_user_id}}",
												"todos"
											],
											"query": [
												{
													"key": "status",
													"value": "{{va_status}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT008-Filtrar pelo user_id, inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/9999/todos",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"9999",
												"todos"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT009-Filtrar pelo id, inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{va_user_id}}/todos?id=9999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{va_user_id}}",
												"todos"
											],
											"query": [
												{
													"key": "id",
													"value": "9999"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT010-Filtrar pelo title, inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{va_user_id}}/todos?title=teste teste",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{va_user_id}}",
												"todos"
											],
											"query": [
												{
													"key": "title",
													"value": "teste teste"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT011-Filtrar pelo due_on, inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{va_user_id}}/todos?due_on={{va_due_on}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{va_user_id}}",
												"todos"
											],
											"query": [
												{
													"key": "due_on",
													"value": "{{va_due_on}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT012-Filtrar pelo status, inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{va_user_id}}/todos?status=teste",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{va_user_id}}",
												"todos"
											],
											"query": [
												{
													"key": "status",
													"value": "teste"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								}
							]
						},
						{
							"name": "GET posts/comments",
							"item": [
								{
									"name": "CT001-Buscar todos os comentários de um post",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);",
													"});",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"vc_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"vc_post_id\", jsonData[1].post_id);",
													"        pm.collectionVariables.set(\"vc_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"vc_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"vc_body\", jsonData[1].body);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT002-Buscar um comments específico id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_id}}/comments",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_id}}",
												"comments"
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT003-Buscar um comments post_id específico",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_id}}/comments?post_id={{vc_post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_id}}",
												"comments"
											],
											"query": [
												{
													"key": "post_id",
													"value": "{{vc_post_id}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT004-Buscar um comments por name especifico ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?name={{vc_name}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "name",
													"value": "{{vc_name}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT005-Buscar um comments por email especifico ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?email={{vc_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "email",
													"value": "{{vc_email}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT006-Buscar um comments por body especifico ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?body={{vc_body}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "body",
													"value": "{{vc_body}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT007-Buscar comments por id, post_id, name, email, body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?email={{vc_email}}&body={{vc_body}}&name={{vc_name}}&id={{vc_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "email",
													"value": "{{vc_email}}"
												},
												{
													"key": "body",
													"value": "{{vc_body}}"
												},
												{
													"key": "name",
													"value": "{{vc_name}}"
												},
												{
													"key": "id",
													"value": "{{vc_id}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT008-Buscar comments por post_id, id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?id={{vc_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{vc_id}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT009-Buscar comments por post_id, name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?name={{vc_name}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "name",
													"value": "{{vc_name}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT010-Buscar comments por post_id, email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?email={{vc_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "email",
													"value": "{{vc_email}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT011-Buscar comments por post_id, body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?body={{vc_body}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "body",
													"value": "{{vc_body}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT012-Buscar comments por name, email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?name={{vc_name}}&email={{vc_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "name",
													"value": "{{vc_name}}"
												},
												{
													"key": "email",
													"value": "{{vc_email}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT013-Buscar comments  por name, body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?name={{vc_name}}&body={{vc_body}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "name",
													"value": "{{vc_name}}"
												},
												{
													"key": "body",
													"value": "{{vc_body}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT014-Buscar um comments por um id inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?id=999999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "999999"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT015-Buscar comments por um post_id inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/9999/comments",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"9999",
												"comments"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT016-Buscar comments por um name inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/9999/comments",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"9999",
												"comments"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT017-Buscar comments por um email inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?email=teste@teste.com.br",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "email",
													"value": "teste@teste.com.br"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT018-Buscar comments por um body inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{vc_post_id}}/comments?body=teste teste",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{vc_post_id}}",
												"comments"
											],
											"query": [
												{
													"key": "body",
													"value": "teste teste"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								}
							]
						},
						{
							"name": "GET users/posts",
							"item": [
								{
									"name": "CT001-Buscar users/post de um usuário",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"    ",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"vp_id\", jsonData[1].id);",
													"      pm.collectionVariables.set(\"vp_user_id\", jsonData[1].user_id);",
													"      pm.collectionVariables.set(\"vp_title\", jsonData[1].title);",
													"      pm.collectionVariables.set(\"vp_body\", jsonData[1].body);        ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts"
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT002-Buscar users/post de um user_id especifico",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{vp_user_id}}/posts",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{vp_user_id}}",
												"posts"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003-Buscar users/post de um user_id, id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{vp_user_id}}/posts/?id={{vp_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{vp_user_id}}",
												"posts",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{vp_id}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004-Buscar users/post de um user_id, title",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{vp_user_id}}/posts?title={{vp_title}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{vp_user_id}}",
												"posts"
											],
											"query": [
												{
													"key": "title",
													"value": "{{vp_title}}"
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005-Buscar users/post de um user_id, body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{vp_user_id}}/posts?body={{vp_body}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{vp_user_id}}",
												"posts"
											],
											"query": [
												{
													"key": "body",
													"value": "{{vp_body}}"
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT006-Buscar users/post de um user_id, id, body, title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{vp_user_id}}/posts?body={{vp_body}}&id={{vp_id}}&title={{vp_title}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{vp_user_id}}",
												"posts"
											],
											"query": [
												{
													"key": "body",
													"value": "{{vp_body}}"
												},
												{
													"key": "id",
													"value": "{{vp_id}}"
												},
												{
													"key": "title",
													"value": "{{vp_title}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007-Buscar users/post de um user_id inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/999/posts",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"999",
												"posts"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008-Buscar users/post de um body inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{vp_user_id}}/posts?body=teste teste",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{vp_user_id}}",
												"posts"
											],
											"query": [
												{
													"key": "body",
													"value": "teste teste"
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT009-Buscar users/post de um title inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{vp_user_id}}/posts?title=teste teste",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{vp_user_id}}",
												"posts"
											],
											"query": [
												{
													"key": "title",
													"value": "teste teste"
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CT010-Buscar users/post de um id inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{vp_user_id}}/posts/?id=123456",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{vp_user_id}}",
												"posts",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "123456"
												},
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get todos",
							"item": [
								{
									"name": "CT001-Buscar todos os todos ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"due_on\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"V-id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"V-user_id\", jsonData[1].user_id);",
													"        pm.collectionVariables.set(\"V-title\", jsonData[1].title);",
													"        pm.collectionVariables.set(\"V-due_on\", jsonData[1].due_on);",
													"        pm.collectionVariables.set(\"V-status\", jsonData[1].status);",
													"",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos"
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT002-Filtra um todos específico id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?id={{V-id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{V-id}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT003-Filtra um todos específico user_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?user_id={{V-user_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "user_id",
													"value": "{{V-user_id}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT004-Filtra um todos específico title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?title={{V-title}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "title",
													"value": "{{V-title}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT005-Filtra um todos específico due_on",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?due_on={{V-due_on}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "due_on",
													"value": "{{V-due_on}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT006-Filtra um todos específico status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?status={{V-status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "status",
													"value": "{{V-status}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT007-Filtra um todos específico id, user_id, title, due_on e status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?status={{V-status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "status",
													"value": "{{V-status}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT008-Filtra um todos específico id e user_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?id={{V-id}}&user_id={{V-user_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{V-id}}"
												},
												{
													"key": "user_id",
													"value": "{{V-user_id}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT009-Filtra um todos específico id e title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?id={{V-id}}&title={{V-title}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{V-id}}"
												},
												{
													"key": "title",
													"value": "{{V-title}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT010-Filtra um todos específico id e due_on",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?id={{V-id}}&due_on={{V-due_on}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{V-id}}"
												},
												{
													"key": "due_on",
													"value": "{{V-due_on}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT011-Filtra um todos específico id e status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?id={{V-id}}&status={{V-status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{V-id}}"
												},
												{
													"key": "status",
													"value": "{{V-status}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT012-Filtra um todos específico user_id e title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?user_id={{V-user_id}}&title={{V-title}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "user_id",
													"value": "{{V-user_id}}"
												},
												{
													"key": "title",
													"value": "{{V-title}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT013-Filtra um todos específico user_id e due_on",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?user_id={{V-user_id}}&due_on={{V-due_on}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "user_id",
													"value": "{{V-user_id}}"
												},
												{
													"key": "due_on",
													"value": "{{V-due_on}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT014-Filtra um todos específico user_id e status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?user_id={{V-user_id}}&status={{V-status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "user_id",
													"value": "{{V-user_id}}"
												},
												{
													"key": "status",
													"value": "{{V-status}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT015-Filtra um todos específico title e due_on",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?title={{V-title}}&due_on={{V-due_on}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "title",
													"value": "{{V-title}}"
												},
												{
													"key": "due_on",
													"value": "{{V-due_on}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT016-Filtra um todos específico title e status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?title={{V-title}}&status={{V-status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "title",
													"value": "{{V-title}}"
												},
												{
													"key": "status",
													"value": "{{V-status}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT017-Filtra um todos específico due_on e status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?due_on={{V-due_on}}&status={{V-status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "due_on",
													"value": "{{V-due_on}}"
												},
												{
													"key": "status",
													"value": "{{V-status}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT018-Filtra um todos por um id inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/7878787",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"7878787"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT019-Filtra um todos por um user_id inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"due_on\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"V_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"V_user_id\", jsonData[1].user_id);",
													"        pm.collectionVariables.set(\"V_title\", jsonData[1].title);",
													"        pm.collectionVariables.set(\"V_due_on\", jsonData[1].due_on);",
													"        pm.collectionVariables.set(\"V_status\", jsonData[1].status);",
													"",
													"});",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?user_id=9999999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{V-id}}",
													"disabled": true
												},
												{
													"key": "user_id",
													"value": "9999999"
												},
												{
													"key": "title",
													"value": "{{V-title}}",
													"disabled": true
												},
												{
													"key": "due_on",
													"value": "{{V-due_on}}",
													"disabled": true
												},
												{
													"key": "status",
													"value": "{{V-status}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT020-Filtra um todos por um title inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?title=teste",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "title",
													"value": "teste"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT021-Filtra um todos por um due_on inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?due_on={{V-due_on}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "due_on",
													"value": "{{V-due_on}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT022-Filtra um todos por um status inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/?status=teste",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											],
											"query": [
												{
													"key": "status",
													"value": "teste"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Comments",
							"item": [
								{
									"name": "CT001- Buscar todos os comments ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_post_id\", jsonData[1].post_id);",
													"        pm.collectionVariables.set(\"v3_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v4_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v5_body\", jsonData[1].body);",
													"",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT002- Buscar um comments específico id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?id={{v1_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}"
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT003- Buscar um comments post_id específico",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?id={{v1_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT004- Buscar um comments por name especifico ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?name={{v3_name}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "name",
													"value": "{{v3_name}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT005- Buscar um comments por email especifico ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?email={{v4_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}"
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT006- Buscar um comments por body especifico ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?id={{v1_id}}&body={{v5_body}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}"
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT007- Buscar comments por id, post_id, name, email, body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?email={{v4_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}"
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT008- Buscar comments por id, post_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?id={{v1_id}}&post_id={{v2_post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}"
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}"
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT009- Buscar comments por id, name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?post_id={{v2_post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}"
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT010- Buscar comments por id, email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?id={{v1_id}}&email={{v4_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}"
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}"
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT011- Buscar comments por id, body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?id={{v1_id}}&email={{v4_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}"
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}"
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT012- Buscar comments por post_id, name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?post_id={{v2_post_id}}&name={{v3_name}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}"
												},
												{
													"key": "name",
													"value": "{{v3_name}}"
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT013- Buscar comments por post_id, email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?post_id={{v2_post_id}}&email={{v4_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}"
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}"
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT014- Buscar comments por post_id, body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?post_id={{v2_post_id}}&body={{v5_body}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}"
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT015- Buscar comments por name, email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?name={{v3_name}}&email={{v4_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}"
												},
												{
													"key": "email",
													"value": "{{v4_email}}"
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT016- Buscar comments  por name, body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?name={{v3_name}}&body={{v5_body}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}"
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT017- Buscar comments por email, body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments?name={{v3_name}}&body={{v5_body}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}"
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT018- Buscar um comments por um id inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments/9999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"9999"
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT019- Buscar comments por um post_id inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments/?post_id=99999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "99999"
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT020- Buscar comments por um name inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "alex rocha",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT021- Buscar comments por um email inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments/?email=teste@teste.com.br",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "teste@teste.com.br"
												},
												{
													"key": "body",
													"value": "{{v5_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT022- Buscar comments por um body inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v1_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v2_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"v3_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"v4_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"v5_status\", jsonData[1].status);",
													"",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments/?body=teste",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											],
											"query": [
												{
													"key": "id",
													"value": "{{v1_id}}",
													"disabled": true
												},
												{
													"key": "post_id",
													"value": "{{v2_post_id}}",
													"disabled": true
												},
												{
													"key": "name",
													"value": "{{v3_name}}",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{v4_email}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "teste"
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								}
							]
						},
						{
							"name": "GET  User",
							"item": [
								{
									"name": "CT001-Buscar todos os usuários",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"gender\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"valor_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"valor_name\", jsonData[1].name);",
													"        pm.collectionVariables.set(\"valor_email\", jsonData[1].email);",
													"        pm.collectionVariables.set(\"valor_gender\", jsonData[1].gender);",
													"        pm.collectionVariables.set(\"valor_status\", jsonData[1].status);",
													"",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT002-Buscar um usuário específico - id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{valor_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{valor_id}}"
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT003- Filtrar pelo nome",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?name={{valor_name}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "name",
													"value": "{{valor_name}}"
												},
												{
													"key": "email",
													"value": "",
													"disabled": true
												},
												{
													"key": "gender",
													"value": "",
													"disabled": true
												},
												{
													"key": "status",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT004- Filtrar pelo email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?email={{valor_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{valor_email}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT005- Filtrar pelo sexo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?gender={{valor_gender}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "gender",
													"value": "{{valor_gender}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT006- Filtrar pela situação Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?status={{valor_status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "status",
													"value": "{{valor_status}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT007- Filtrar pelo nome, e-mail, sexo e situação",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 50s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?name={{valor_name}}&email={{valor_email}}&gender={{valor_gender}}&status={{valor_status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "name",
													"value": "{{valor_name}}"
												},
												{
													"key": "email",
													"value": "{{valor_email}}"
												},
												{
													"key": "gender",
													"value": "{{valor_gender}}"
												},
												{
													"key": "status",
													"value": "{{valor_status}}"
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT008- Filtrar pelo nome e e-mail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?name={{valor_name}}&email={{valor_email}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "name",
													"value": "{{valor_name}}"
												},
												{
													"key": "email",
													"value": "{{valor_email}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "status",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT009- Filtrar pelo nome e sexo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?name={{valor_name}}&gender={{valor_gender}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "name",
													"value": "{{valor_name}}"
												},
												{
													"key": "gender",
													"value": "{{valor_gender}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT010- Filtrar pelo nome e situação",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?name={{valor_name}}&status={{valor_status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "name",
													"value": "{{valor_name}}"
												},
												{
													"key": "status",
													"value": "{{valor_status}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT011- Filtrar pelo e-mail e sexo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?email={{valor_email}}&gender={{valor_gender}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{valor_email}}"
												},
												{
													"key": "gender",
													"value": "{{valor_gender}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT012- Filtrar pelo e-mail e situação",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?email={{valor_email}}&status={{valor_status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "email",
													"value": "{{valor_email}}"
												},
												{
													"key": "status",
													"value": "{{valor_status}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT013- Filtrar pelo sexo e situação",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users?gender={{valor_gender}}&status={{valor_status}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "gender",
													"value": "{{valor_gender}}"
												},
												{
													"key": "status",
													"value": "{{valor_status}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT014- Buscar um usuário que não existe pelo id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/9999  vv",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"9999  vv"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT014.01- Buscar um usuário que não existe pelo id com letra",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/9999 a",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"9999 a"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT014.02- Buscar um usuário que não existe pelo id numero valido e letra com espaço Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5000s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/9999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"9999"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT015- Buscar um usuário por um id inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/users/9999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"9999"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT016- Buscar usuário por um nome inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url_base}}/public/v2/users?name=Alex Rocha",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "name",
													"value": "Alex Rocha"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT017- Buscar usuário por um email inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url_base}}/public/v2/users?email=alex.rocha@gmail.com",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "email",
													"value": "alex.rocha@gmail.com"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT018- Buscar usuário por um sexo inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"/*",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"gender\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"valor_id\", jsonData[0].id);",
													"        pm.collectionVariables.set(\"valor_name\", jsonData[0].name);",
													"        pm.collectionVariables.set(\"valor_email\", jsonData[0].email);",
													"        pm.collectionVariables.set(\"valor_gender\", jsonData[0].gender);",
													"        pm.collectionVariables.set(\"valor_status\", jsonData[0].status);",
													"",
													"});",
													"",
													"*/",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url_base}}/public/v2/users?gender=outros",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "gender",
													"value": "outros"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								},
								{
									"name": "CT019- Buscar usuário por uma situação inválida",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url_base}}/public/v2/users?status=Outros",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users"
											],
											"query": [
												{
													"key": "status",
													"value": "Outros"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Coluna Tests, usando automação"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "GET Post",
							"item": [
								{
									"name": "CT001 - Buscar todos os posts ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"        //pm.expect(item).to.have.property(\"status\");",
													"    })",
													"        //usar valores do retorno em outro teste",
													"        pm.collectionVariables.set(\"v_id\", jsonData[1].id);",
													"        pm.collectionVariables.set(\"v_user_id\", jsonData[1].user_id);",
													"        pm.collectionVariables.set(\"v_title\", jsonData[1].title);",
													"        pm.collectionVariables.set(\"v_body\", jsonData[1].body);",
													"        //pm.collectionVariables.set(\"v_status\", jsonData[1].status);",
													"",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts"
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT002 - Buscar posts por Id específico",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts?user_id={{v_user_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts"
											],
											"query": [
												{
													"key": "user_id",
													"value": "{{v_user_id}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT003 - Filtrar post pelo user_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts?user_id={{v_user_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts"
											],
											"query": [
												{
													"key": "user_id",
													"value": "{{v_user_id}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT004 - Filtra por title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts?title={{v_title}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts"
											],
											"query": [
												{
													"key": "title",
													"value": "{{v_title}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT005 - Filtra por body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts?title={{v_title}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts"
											],
											"query": [
												{
													"key": "title",
													"value": "{{v_title}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT006 - Filtra por Id, user_id e title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/?user_id={{v_user_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											],
											"query": [
												{
													"key": "user_id",
													"value": "{{v_user_id}}"
												},
												{
													"key": "title",
													"value": "{{v_title}}",
													"disabled": true
												},
												{
													"key": "body",
													"value": "{{v_body}}",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT007 - Filtra por Id, user_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts?user_id={{v_user_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts"
											],
											"query": [
												{
													"key": "user_id",
													"value": "{{v_user_id}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT008 - Filtra por Id e title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts?user_id={{v_user_id}}&title={{v_title}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts"
											],
											"query": [
												{
													"key": "user_id",
													"value": "{{v_user_id}}"
												},
												{
													"key": "title",
													"value": "{{v_title}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT009 - Filtra por user_id e title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts?user_id={{v_user_id}}&title={{v_title}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts"
											],
											"query": [
												{
													"key": "user_id",
													"value": "{{v_user_id}}"
												},
												{
													"key": "title",
													"value": "{{v_title}}"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT010 - Buscar um usuário que não existe pelo id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/9999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"9999"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT010.01 - Buscar um usuário que não existe pelo id com letra",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/aa99",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"aa99"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT011 - Buscar por user_id inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/?user_id=9999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											],
											"query": [
												{
													"key": "user_id",
													"value": "9999"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT012 - Buscar por title inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/?title=teste",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											],
											"query": [
												{
													"key": "title",
													"value": "teste"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								},
								{
									"name": "CT013 - Buscar por body inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/posts/?body=teste de body",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											],
											"query": [
												{
													"key": "body",
													"value": "teste de body"
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "A variável url_base foi adicionado direto na collection, botão direito, editar, variável"
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POSTS",
					"item": [
						{
							"name": "POST User",
							"item": [
								{
									"name": "Buscando POSTS para coletar um user_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"post_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"post_user_id\", jsonData[0].user_id);",
													"      pm.collectionVariables.set(\"post_title\", jsonData[0].title);",
													"      pm.collectionVariables.set(\"post_body\", jsonData[0].body);        ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}\n\n// Criando sem ser aleatório\n/*{\n    \"name\": \"Alex Rocha\",\n    \"email\": \"teste@teste.com.br\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}*/\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT-001 - Cadastrar um usuário com sucesso todos os campos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}\n\n// Criando sem ser aleatório\n/*{\n    \"name\": \"Alex Rocha\",\n    \"email\": \"teste@teste.com.br\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}*/\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT-002 - Cadastrar um usuário com sucesso somente campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT-003 - Cadastrar um usuário gender female",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT-004 - Cadastrar um usuário gender male",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT-005 - Cadastrar um usuário status active",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT-006 - Cadastrar um usuário status inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Cadastrar um usuário email",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Cadastrar um usuário sem informar os campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\", \n    \"email\": \"\", \n    \"gender\": \"\",\n    \"status\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT009 - Cadastrar um usuário em duplicidade",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "// Criando sem ser aleatório\n{\n    \"name\": \"AlexRocha\",\n    \"email\": \"test@teste.com.br\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT009.01 - Cadastrar um usuário em duplicidade",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "// Criando sem ser aleatório\n{\n    \"name\": \"AlexRocha\",\n    \"email\": \"test@teste.com.br\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT010 - Cadastrar um usuário campo nome inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"@#$%\",\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT011 - Cadastrar um usuário campo email inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"teste@\", \n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT012 - Cadastrar um usuário campo gender inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"mm\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT013 - Cadastrar um usuário campo status inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													"",
													"pm.test(\"Body response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.collectionVariables.set(\"userIdPut\", jsonData.id);",
													"    //criando uma segunda variavel para o patch, não é necessáiro apenas teste",
													"    pm.collectionVariables.set(\"userIdPatch\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"female\",\n    \"status\": \"ii\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST Posts",
							"item": [
								{
									"name": "Buscando POSTS para coletar um user_id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//pm.test(\"Retorno status code is 201\", function (){",
													"//    pm.response.to.have.status(201);",
													"//});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"post_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"post_user_id\", jsonData[0].user_id);",
													"      pm.collectionVariables.set(\"post_title\", jsonData[0].title);",
													"      pm.collectionVariables.set(\"post_body\", jsonData[0].body);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}\n\n// Criando sem ser aleatório\n/*{\n    \"name\": \"Alex Rocha\",\n    \"email\": \"teste@teste.com.br\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}*/\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Cadastrar um POSTS com sucesso todos os campos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{post_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Cadastrar um POSTS somente campos obrigatórios",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{post_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"body\":\"{{$randomLoremText}}\"\n}\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Cadastrar um POSTS title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"user_id\":\"{{post_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"body\":\"{{$randomLoremText}}\"\n}\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Cadastrar um POSTS body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"user_id\":\"{{post_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"body\":\"{{$randomLoremText}}\"\n}\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Cadastrar um POSTS em duplicidade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    /*É POSSÍVEL INSEIR UM POST EM DUPLICIDADE*/\n    \"id\":\"{{post_id}}\", // o id é ignorado\n    \"user_id\":\"{{post_user_id}}\",\n    \"title\":\"{{post_title}}\", \n    \"body\":\"{{post_body}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT006 - Cadastrar um POSTS campo title inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{post_user_id}}\",\n    \"title\":\" \" ,\n    \"body\":\"{{$randomLoremText}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Cadastrar um POSTS campo body inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \n    \"user_id\":\"{{post_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"body\":\" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST Comments",
							"item": [
								{
									"name": "Buscando COMMENTS para coletar um user_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"comme_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"comme_post_id\", jsonData[0].post_id);",
													"      pm.collectionVariables.set(\"comme_name\", jsonData[0].name);",
													"      pm.collectionVariables.set(\"comme_email\", jsonData[0].email);        ",
													"      pm.collectionVariables.set(\"comme_body\", jsonData[0].body);        ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Cadastrar um COMMENSTS com sucesso todos os campos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"post_id\":\"{{comme_post_id}}\",\n    \"name\":\"{{$randomFullName}}\" ,\n    \"email\":\"{{$randomEmail}}\",\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Cadastrar um COMMENSTS com sucesso somente campos obrigatórios",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"post_id\":\"{{comme_post_id}}\",\n    \"name\":\"{{$randomFullName}}\" ,\n    \"email\":\"{{$randomEmail}}\",\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Cadastrar um COMMENSTS campo name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"post_id\":\"{{comme_post_id}}\",\n    \"name\":\"{{$randomFullName}}\" ,\n    \"email\":\"{{$randomEmail}}\",\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Cadastrar um COMMENSTS campo email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"post_id\":\"{{comme_post_id}}\",\n    \"name\":\"{{$randomFullName}}\" ,\n    \"email\":\"{{$randomEmail}}\",\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Cadastrar um COMMENSTS campo body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"post_id\":\"{{comme_post_id}}\",\n    \"name\":\"{{$randomFullName}}\" ,\n    \"email\":\"{{$randomEmail}}\",\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT006 - Cadastrar um Comments em duplicidade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/*É POSSÍVEL INSEIR UM COMMENTS EM DUPLICIDADE*/\n{\n    \"id\":\"{{comme_id}}\", /*o id é ignorado*/\n    \"post_id\":\"{{comme_post_id}}\",\n    \"name\":\"{{comme_name}}\" ,\n    \"email\":\"{{comme_email}}\",\n    \"body\":\"{{comme_body}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Cadastrar um Comments campo nome inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"post_id\":\"{{comme_post_id}}\",\n    \"name\":\" \" ,\n    \"email\":\"{{$randomEmail}}\",\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Cadastrar um Comments campo email inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"post_id\":\"{{comme_post_id}}\",\n    \"name\":\"{{$randomFullName}}\" ,\n    \"email\":\" \",\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT009 - Cadastrar um Comments campo body inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"post_id\":\"{{comme_post_id}}\",\n    \"name\":\"{{$randomFullName}}\" ,\n    \"email\":\"{{$randomEmail}}\",\n    \"body\":\" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT010 - Cadastrar um Comments post_id inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"post_id\":\" \",\n    \"name\":\"{{$randomFullName}}\" ,\n    \"email\":\"{{$randomEmail}}\",\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "POST Todos",
							"item": [
								{
									"name": "Buscando TODOS para coletar um user_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"due_on\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"todos_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"todos_user_id\", jsonData[0].user_id);",
													"      pm.collectionVariables.set(\"todos_title\", jsonData[0].title);",
													"      pm.collectionVariables.set(\"todos_due_on\", jsonData[0].due_on);        ",
													"      pm.collectionVariables.set(\"todos_status\", jsonData[0].status);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Cadastrar um COMMENSTS com sucesso todos os campos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{todos_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"due_on\":\"{{$randomDateFuture}}\",\n    \"status\": \"completed\" // or pending\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Cadastrar um TODOS com sucesso, somente campos obrigatórios",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{todos_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"due_on\":\"{{$randomDateFuture}}\",\n    \"status\": \"completed\" // or pending\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Cadastrar um TODOS campo title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{todos_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"due_on\":\"{{$randomDateFuture}}\",\n    \"status\": \"completed\" // or pending\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Cadastrar um TODOS campo due_on",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{todos_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"due_on\":\"{{$randomDateFuture}}\",\n    \"status\": \"completed\" // or pending\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Cadastrar um TODOS campo status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{todos_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"due_on\":\"{{$randomDateFuture}}\",\n    \"status\": \"completed\" // or pending\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "copia CT006 - Cadastrar um TODOS em duplicidade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{todos_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"due_on\":\"{{$randomDateFuture}}\",\n    \"status\": \"completed\" // or pending\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Cadastrar um TODOS campo title inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{todos_user_id}}\",\n    \"title\":\" \" ,\n    \"due_on\":\"{{$randomDateFuture}}\",\n    \"status\": \"completed\" // or pending\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Cadastrar um TODOS campo due_on inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{todos_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"due_on\":\" \",\n    \"status\": \"completed\" // or pending\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT009 - Cadastrar um TODOS campo status inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{todos_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"due_on\":\"{{$randomDateFuture}}\",\n    \"status\": \" \" //completed or pending\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT010 - Cadastrar um TODOS user_id inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\" \",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"due_on\":\"{{$randomDateFuture}}\",\n    \"status\": \"completed\" // or pending\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "PUT Users",
							"item": [
								{
									"name": "CT001 - Alterar  um usuário com sucesso - todos os campos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Alterar um usuário com sucesso - somente campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Alterar um usuário - gender female",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Alterar um usuário - gender male",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Alterar um usuário - status active",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT006 - Alterar um usuário - status inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"inactive\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Alterar um usuário - campo status inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"});",
													"*/",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"\" //com o status inexitente\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Alterar um usuário - campo nome inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"inactive\");",
													"});",
													"*/",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \" \", //com o nome inexistente\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT009 - Alterar um usuário - campo email inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"inactive\");",
													"});",
													"*/",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT010 - Alterar um usuário - campo gender inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \" \",\n    \"status\": \"active\"\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT010.01 - Alterar um usuário - campo gender inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"// tirando para teste",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPut\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"});",
													"*/",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"malee\",\n    \"status\": \"active\"\n    //male or female\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPut}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPut}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PUT Post",
							"item": [
								{
									"name": "Buscando POSTS para coletar um user_id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"post_idPUT\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"post_user_idPUT\", jsonData[0].user_id);",
													"      pm.collectionVariables.set(\"post_titlePUT\", jsonData[0].title);",
													"      pm.collectionVariables.set(\"post_bodyPUT\", jsonData[0].body);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Alterar  um post com sucesso - todos os campos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{post_idPUT}}\",\n    \"user_id\": \"{{post_user_idPUT}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomJobType}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_idPUT}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_idPUT}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Alterar um posts com sucesso - somente campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{post_idPUT}}\",\n    \"user_id\": \"{{post_user_idPUT}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomJobType}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_idPUT}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_idPUT}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Alterar um posts - title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{post_idPUT}}\",\n    \"user_id\": \"{{post_user_idPUT}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomJobType}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_idPUT}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_idPUT}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Alterar um posts - body",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{post_idPUT}}\",\n    \"user_id\": \"{{post_user_idPUT}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomJobType}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_idPUT}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_idPUT}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Alterar um post sem informar os campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\" \",\n    \"user_id\": \" \",\n    \"title\": \" \",\n    \"body\": \" \"\n}\n/*\n{\n    \"id\":\"{{post_idPUT}}\",\n    \"user_id\": \"{{post_user_idPUT}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomJobType}}\"\n}\n*/",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_idPUT}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_idPUT}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT006 - Alterar um posts com user_id inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": \" \",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomJobType}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_idPUT}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_idPUT}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Alterar um posts com title inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": \"{{post_user_idPUT}}\",\n    \"title\": \" \",\n    \"body\": \"{{$randomJobType}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_idPUT}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_idPUT}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Alterar um posts com body inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{post_idPUT}}\",\n    \"user_id\": \"{{post_user_idPUT}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_idPUT}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_idPUT}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "PUT Comments",
							"item": [
								{
									"name": "Buscando COMMENTS para coletar um user_id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"putComme_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"putComme_post_id\", jsonData[0].post_id);",
													"      pm.collectionVariables.set(\"putComme_name\", jsonData[0].name);",
													"      pm.collectionVariables.set(\"putComme_email\", jsonData[0].email);        ",
													"      pm.collectionVariables.set(\"putComme_body\", jsonData[0].body);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Alterar  um comments com sucesso - todos os campos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomeC\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailC\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{putComme_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}      \n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{putComme_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{putComme_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Alterar um comments com sucesso - somente campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomeC\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailC\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{putComme_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}      \n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{putComme_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{putComme_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": " CT003 - Alterar um comments - name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomeC\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailC\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{putComme_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}      \n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{putComme_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{putComme_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Alterar um comments - email",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomeC\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailC\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{putComme_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}      \n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{putComme_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{putComme_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Alterar um posts - body",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomeC\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailC\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{putComme_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}      \n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{putComme_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{putComme_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT006 - Alterar um comment sem informar os campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomeC\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailC\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\" \",\n    \"user_id\": \" \",\n    \"name\": \" \",\n    \"email\": \" \",\n    \"body\": \" \"\n}      \n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{putComme_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{putComme_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Alterar um comments com body inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomeC\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailC\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{putComme_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \" \"\n}      \n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{putComme_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{putComme_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Alterar um comments com email inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomeC\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailC\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{putComme_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \" \",\n    \"body\": \"{{$randomLoremText}}\"\n}      \n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{putComme_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{putComme_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": " CT009 - Alterar um comments - name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//nome e email aleatorio é atribuido para nomePut e emailPut",
													"//pm.collectionVariables.set(\"nomeC\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"//pm.collectionVariables.set(\"emailC\", pm.variables.replaceIn('{{$randomEmail}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{putComme_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"name\": \" \",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}      \n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{putComme_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{putComme_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PUT Todos",
							"item": [
								{
									"name": "Buscando TODOS para coletar um id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"due_on\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"todosput_id\", jsonData[1].id);",
													"      pm.collectionVariables.set(\"todosput_user_id\", jsonData[1].user_id);",
													"      pm.collectionVariables.set(\"todosput_title\", jsonData[1].title);",
													"      pm.collectionVariables.set(\"todosput_due_on\", jsonData[1].due_on);        ",
													"      pm.collectionVariables.set(\"todosput_status\", jsonData[1].status);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Alterar um todos com sucesso - todos os campos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Alterar um todos com sucesso - somente campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"pending\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Alterar um todos - title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Alterar um posts - due_on",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Alterar um todos - status pending",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"pending\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT006 - Alterar um todos - status completed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Alterar um todos sem informar os campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\" \",\n    \"user_id\": \" \",\n    \"title\": \" \",\n    \"due_on\": \" \",\n    \"status\": \" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Alterar um todos - status inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT009 - Alterar um posts - due_on inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \" \",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT010 - Alterar um posts - title inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \" \",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "PATCH  Users",
							"item": [
								{
									"name": "CT001 - Alterar  um usuário com sucesso - todos os campos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Alterar um usuário com sucesso - somente campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Alterar um usuário - gender female",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"female\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Alterar um usuário - gender male",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Alterar um usuário - status active",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": " CT006 - Alterar um usuário - status inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"inactive\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Alterar um usuário sem informar os campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"inactive\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \" \",\n    \"email\":\" \", \n    \"gender\": \" \",\n    \"status\": \" \" \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Alterar um usuário que não existe",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 404\", function (){",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"inactive\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/99999999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"99999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT009 - Alterar um usuário - campo nome inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 404\", function (){",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"inactive\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \" \",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT010 - Alterar um usuário campo email inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 404\", function (){",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"inactive\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \" \", //\"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT011 - Alterar um usuário campo gender inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 404\", function (){",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"inactive\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \" \",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT012 - Alterar um usuário campo status inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"nomePut\", pm.variables.replaceIn('{{$randomFullName}}'));",
													"pm.collectionVariables.set(\"emailPut\", pm.variables.replaceIn('{{$randomEmail}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 404\", function (){",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"male\");",
													"    pm.expect(jsonData.status).to.eq(\"inactive\");",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(500000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{nomePut}}\",\n    \"email\": \"{{emailPut}}\",\n    \"gender\": \"male\",\n    \"status\": \" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdPatch}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdPatch}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH Posts",
							"item": [
								{
									"name": "Buscando POSTS para coletar um id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//pm.test(\"Retorno status code is 201\", function (){",
													"//    pm.response.to.have.status(201);",
													"//});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"post_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"post_user_id\", jsonData[0].user_id);",
													"      pm.collectionVariables.set(\"post_title\", jsonData[0].title);",
													"      pm.collectionVariables.set(\"post_body\", jsonData[0].body);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}\n\n// Criando sem ser aleatório\n/*{\n    \"name\": \"Alex Rocha\",\n    \"email\": \"teste@teste.com.br\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}*/\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Alterar  um post com sucesso todos os campos Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Alterar um posts com sucesso somente campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Alterar um posts title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Alterar um posts - body",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Alterar um post sem informar os campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \" \",\n    \"user_id\": \" \", \n    \"title\": \" \",\n    \"body\": \" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT006 - Alterar um posts com user_id inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \" \",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Alterar um posts com body inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"body\": \" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Alterar um posts com title inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"title\": \" \",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{post_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH Comments",
							"item": [
								{
									"name": "Buscando COMMENTS para coletar um user_id Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"putComme_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"putComme_post_id\", jsonData[0].post_id);",
													"      pm.collectionVariables.set(\"putComme_name\", jsonData[0].name);",
													"      pm.collectionVariables.set(\"putComme_email\", jsonData[0].email);        ",
													"      pm.collectionVariables.set(\"putComme_body\", jsonData[0].body);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Alterar  um post com sucesso todos os campos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Alterar um comments com sucesso somente campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Alterar um comments name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Alterar um comments email",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Alterar um posts body",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT006 - Alterar um comment sem informar os campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \" \",\n    \"user_id\": \" \",\n    \"name\":\" \",\n    \"email\": \" \",\n    \"body\": \" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Alterar um comments user_id inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 404\", function (){",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/999999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Alterar um comments name inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{post_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT009 - Alterar um comments email inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"/*",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"    pm.expect(jsonData).to.have.property(\"gender\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"userIdPatch\"));",
													"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"nomePut\"));",
													"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"emailPut\"));",
													"    pm.expect(jsonData.gender).to.eq(\"female\");",
													"    pm.expect(jsonData.status).to.eq(\"active\");",
													"",
													"});",
													"*/",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{post_id}}\",\n    \"user_id\": \"{{post_user_id}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \" \",\n    \"body\": \"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{post_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{post_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PATCH Todos",
							"item": [
								{
									"name": "Buscando TODOS para coletar um id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"due_on\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"todosput_id\", jsonData[1].id);",
													"      pm.collectionVariables.set(\"todosput_user_id\", jsonData[1].user_id);",
													"      pm.collectionVariables.set(\"todosput_title\", jsonData[1].title);",
													"      pm.collectionVariables.set(\"todosput_due_on\", jsonData[1].due_on);        ",
													"      pm.collectionVariables.set(\"todosput_status\", jsonData[1].status);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Alterar um todos com sucesso - todos os campos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Alterar um todos com sucesso - somente campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"pending\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Alterar um todos - title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Alterar um posts - due_on",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Alterar um todos - status pending",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"pending\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT006 - Alterar um todos - status completed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT007 - Alterar um todos sem informar os campos obrigatórios",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\" \",\n    \"user_id\": \" \",\n    \"title\": \" \",\n    \"due_on\": \" \",\n    \"status\": \" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT008 - Alterar um todos - status inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \" \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT009 - Alterar um posts - due_on inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \"{{$randomJobTitle}}\",\n    \"due_on\": \" \",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT010 - Alterar um posts - title inexistente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 422\", function (){",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\":\"{{todosput_id}}\",\n    \"user_id\": \"{{putComme_post_id}}\",\n    \"title\": \" \",\n    \"due_on\": \"{{$randomDateFuture}}\",\n    \"status\": \"completed\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{todosput_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{todosput_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DELETE Users",
							"item": [
								{
									"name": "Pré-quest DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function(){",
													"    pm.response.to.have.status(201);",
													"",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"email\");",
													"        ",
													"    pm.collectionVariables.set(\"userIdDelete\", jsonData.id);",
													"    pm.collectionVariables.set(\"userNameDelete\", jsonData.name);",
													"    pm.collectionVariables.set(\"userEmailDelete\", jsonData.email);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Excluir  um usuário com sucesso ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"user deletado com sucesso Status code is 201\", function(){",
													"    pm.response.to.have.status(204);",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function(){",
													"    var jsonData = pm.response.text();",
													"    pm.expect(jsonData.length).to.eq(0);",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \" {{userNameDelete}}\", //\"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdDelete}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdDelete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Excluir um usuário inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function(){",
													"    pm.response.to.have.status(404);",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"/*",
													"pm.test(\"Body response\", function(){",
													"    var jsonData = pm.response.text();",
													"    pm.expect(jsonData.length).to.eq(0);",
													"});",
													"*/",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/999999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Excluir um usuário com to do",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"user deletado com sucesso Status code is 201\", function(){",
													"    pm.response.to.have.status(204);",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function(){",
													"    var jsonData = pm.response.text();",
													"    pm.expect(jsonData.length).to.eq(0);",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Excluir  um usuário passando somente o name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"user deletado com sucesso Status code is 201\", function(){",
													"    pm.response.to.have.status(204);",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function(){",
													"    var jsonData = pm.response.text();",
													"    pm.expect(jsonData.length).to.eq(0);",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \" {{userNameDelete}}\"\n    //\"email\": \"{{$randomEmail}}\",\n    //\"gender\": \"male\",\n    //\"status\": \"active\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT005 - Excluir  um usuário passando somente o email ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"user deletado com sucesso Status code is 201\", function(){",
													"    pm.response.to.have.status(204);",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function(){",
													"    var jsonData = pm.response.text();",
													"    pm.expect(jsonData.length).to.eq(0);",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    //\"name\": \" {{userNameDelete}}\", //\"{{$randomFullName}}\",\n    \"email\": \"{{userEmailDelete}}\"\n    //\"gender\": \"male\",\n    //\"status\": \"active\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Pós-Delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function(){",
													"    pm.response.to.have.status(404);",
													"",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"\tvar jsonData = pm.response.json();",
													"\tpm.expect(jsonData).to.have.property(\"message\");",
													"\tpm.expect(jsonData.message).to.be.eq(\"Resource not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/users/{{userIdDelete}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"users",
												"{{userIdDelete}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE Posts",
							"item": [
								{
									"name": "Buscando POSTS para coletar um user_id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//pm.test(\"Retorno status code is 201\", function (){",
													"//    pm.response.to.have.status(201);",
													"//});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"post_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"post_user_id\", jsonData[0].user_id);",
													"      pm.collectionVariables.set(\"post_title\", jsonData[0].title);",
													"      pm.collectionVariables.set(\"post_body\", jsonData[0].body);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\", //função do postman\n    \"email\": \"{{$randomEmail}}\", //função do postman\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}\n\n// Criando sem ser aleatório\n/*{\n    \"name\": \"Alex Rocha\",\n    \"email\": \"teste@teste.com.br\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}*/\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Inserindo um POSTS - primeiro delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"user_id\");",
													"    pm.expect(jsonData).to.have.property(\"title\");",
													"    pm.expect(jsonData).to.have.property(\"body\");",
													"        ",
													"    pm.collectionVariables.set(\"userIdDelete\", jsonData.id);",
													"    pm.collectionVariables.set(\"userUserIdDelete\", jsonData.user_id);",
													"    pm.collectionVariables.set(\"userTitleDelete\", jsonData.title);",
													"    pm.collectionVariables.set(\"userBodyDelete\", jsonData.Body);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{post_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Excluir  um posts com sucesso ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"user deletado com sucesso Status code is 201\", function(){",
													"    pm.response.to.have.status(204);",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function(){",
													"    var jsonData = pm.response.text();",
													"    pm.expect(jsonData.length).to.eq(0);",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": \" {{userIdDelete}}\",\n    \"title\": \"{{userTitleDelete}}\",\n    \"body\": \"{{userBodyDelete}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/{{userIdDelete}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"{{userIdDelete}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Inserindo um POSTS - segundo delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 201\", function (){",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"user_id\");",
													"    pm.expect(jsonData).to.have.property(\"title\");",
													"    pm.expect(jsonData).to.have.property(\"body\");",
													"        ",
													"    pm.collectionVariables.set(\"userIdDelete\", jsonData.id);",
													"    pm.collectionVariables.set(\"userUserIdDelete\", jsonData.user_id);",
													"    pm.collectionVariables.set(\"userTitleDelete\", jsonData.title);",
													"    pm.collectionVariables.set(\"userBodyDelete\", jsonData.Body);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\":\"{{post_user_id}}\",\n    \"title\":\"{{$randomJobTitle}}\" ,\n    \"body\":\"{{$randomLoremText}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Excluir um posts inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"user deletado com sucesso Status code is 404\", function(){",
													"    pm.response.to.have.status(404);",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": \" {{userIdDelete}}\",\n    \"title\": \"{{userTitleDelete}}\",\n    \"body\": \"{{userBodyDelete}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/999999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT003 - Excluir um posts sem informar um user_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"user deletado com sucesso Status code is 404\", function(){",
													"    pm.response.to.have.status(404);",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"{{userTitleDelete}}\",\n    \"body\": \"{{userBodyDelete}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Excluir um posts com to do",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"user deletado com sucesso Status code is 404\", function(){",
													"    pm.response.to.have.status(404);",
													"",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function(){",
													"    var jsonData = pm.response.text();",
													"    pm.expect(jsonData.length).to.eq(0);",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": \" {{userIdDelete}}\",\n    \"title\": \"{{userTitleDelete}}\",\n    \"body\": \"{{userBodyDelete}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_base}}/public/v2/posts/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"posts",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE Comments",
							"item": [
								{
									"name": "Buscando id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"post_id\");",
													"        pm.expect(item).to.have.property(\"name\");",
													"        pm.expect(item).to.have.property(\"email\");",
													"        pm.expect(item).to.have.property(\"body\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"postC_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"postC_user_id\", jsonData[0].post_id);",
													"      pm.collectionVariables.set(\"postC_name\", jsonData[0].name);",
													"      pm.collectionVariables.set(\"postC_email\", jsonData[0].email);        ",
													"      pm.collectionVariables.set(\"postC_body\", jsonData[0].body);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Excluir  um comments com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 204\", function (){",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments/{{postC_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"{{postC_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 -  Excluir um comments inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 404\", function (){",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments/999999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT004 - Excluir um comments com to do",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 404\", function (){",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/comments/",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"comments",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE todos",
							"item": [
								{
									"name": "Buscar TODOS id - primeiro",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"due_on\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"del_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"del_user_id\", jsonData[0].user_id);",
													"      pm.collectionVariables.set(\"del_title\", jsonData[0].title);",
													"      pm.collectionVariables.set(\"del_due_on\", jsonData[0].due_on);        ",
													"      pm.collectionVariables.set(\"del_status\", jsonData[0].body);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT001 - Excluir  um todos com sucesso",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 204\", function (){",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/{{del_id}}",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"{{del_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Buscar TODOS id - segundo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 200\", function (){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Body response\", function (){ ",
													"    var jsonData = pm.response.json();",
													"   //laço comando .each",
													"    _.each(jsonData, (item) => { ",
													"        //verificando se todos os retornos tem os campos abaixo",
													"        pm.expect(item).to.have.property(\"id\");",
													"        pm.expect(item).to.have.property(\"user_id\");",
													"        pm.expect(item).to.have.property(\"title\");",
													"        pm.expect(item).to.have.property(\"due_on\");",
													"        pm.expect(item).to.have.property(\"status\");",
													"    })",
													"     //usar valores do retorno em outro teste",
													"      pm.collectionVariables.set(\"del_id\", jsonData[0].id);",
													"      pm.collectionVariables.set(\"del_user_id\", jsonData[0].user_id);",
													"      pm.collectionVariables.set(\"del_title\", jsonData[0].title);",
													"      pm.collectionVariables.set(\"del_due_on\", jsonData[0].due_on);        ",
													"      pm.collectionVariables.set(\"del_status\", jsonData[0].body);        ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url_base}}/public/v2/todos",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos"
											]
										}
									},
									"response": []
								},
								{
									"name": "CT002 - Excluir um todos inexistente",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retorno status code is 204\", function (){",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Response time is less than 5s\", function (){",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test(\"Campo Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "af8fa5e7d4e024082b0fb11f391f9199c39b08058f013ec8d02cfd2966e3085e",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "Content-Type"
											}
										],
										"url": {
											"raw": "{{url_base}}/public/v2/todos/999999999",
											"host": [
												"{{url_base}}"
											],
											"path": [
												"public",
												"v2",
												"todos",
												"999999999"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "V-due_on",
			"value": ""
		},
		{
			"key": "V-id",
			"value": ""
		},
		{
			"key": "V-status",
			"value": ""
		},
		{
			"key": "V-title",
			"value": ""
		},
		{
			"key": "V-user_id",
			"value": ""
		},
		{
			"key": "vp_body",
			"value": ""
		},
		{
			"key": "vp_id",
			"value": ""
		},
		{
			"key": "vp_title",
			"value": ""
		},
		{
			"key": "vp_user_id",
			"value": ""
		},
		{
			"key": "vc_body",
			"value": ""
		},
		{
			"key": "vc_id",
			"value": ""
		},
		{
			"key": "vc_title",
			"value": ""
		},
		{
			"key": "vc_user_id",
			"value": ""
		},
		{
			"key": "vp_email",
			"value": ""
		},
		{
			"key": "vp_gender",
			"value": ""
		},
		{
			"key": "vp_name",
			"value": ""
		},
		{
			"key": "vp_status",
			"value": ""
		},
		{
			"key": "vc_email",
			"value": ""
		},
		{
			"key": "vc_name",
			"value": ""
		},
		{
			"key": "vc_post_id",
			"value": ""
		},
		{
			"key": "va_due_on",
			"value": ""
		},
		{
			"key": "va_id",
			"value": ""
		},
		{
			"key": "va_status",
			"value": ""
		},
		{
			"key": "va_title",
			"value": ""
		},
		{
			"key": "va_user_id",
			"value": ""
		},
		{
			"key": "url_base",
			"value": "https://gorest.co.in"
		},
		{
			"key": "valor_email",
			"value": ""
		},
		{
			"key": "valor_gender",
			"value": ""
		},
		{
			"key": "valor_id",
			"value": ""
		},
		{
			"key": "valor_name",
			"value": ""
		},
		{
			"key": "valor_status",
			"value": ""
		},
		{
			"key": "v_body",
			"value": ""
		},
		{
			"key": "v_id",
			"value": ""
		},
		{
			"key": "v_title",
			"value": ""
		},
		{
			"key": "v_user_id",
			"value": ""
		},
		{
			"key": "v1_id",
			"value": ""
		},
		{
			"key": "v2_post_id",
			"value": ""
		},
		{
			"key": "v3_name",
			"value": ""
		},
		{
			"key": "v4_email",
			"value": ""
		},
		{
			"key": "v5_body",
			"value": ""
		},
		{
			"key": "emailPut",
			"value": ""
		},
		{
			"key": "nomePut",
			"value": ""
		},
		{
			"key": "userIdPut",
			"value": ""
		},
		{
			"key": "userIdDelete",
			"value": ""
		},
		{
			"key": "emailPatch",
			"value": ""
		},
		{
			"key": "nomePatch",
			"value": ""
		},
		{
			"key": "userIdPatch",
			"value": ""
		},
		{
			"key": "post_body",
			"value": ""
		},
		{
			"key": "post_id",
			"value": ""
		},
		{
			"key": "post_title",
			"value": ""
		},
		{
			"key": "post_user_id",
			"value": ""
		},
		{
			"key": "comme_body",
			"value": ""
		},
		{
			"key": "comme_email",
			"value": ""
		},
		{
			"key": "comme_id",
			"value": ""
		},
		{
			"key": "comme_name",
			"value": ""
		},
		{
			"key": "comme_post_id",
			"value": ""
		},
		{
			"key": "todos_due_on",
			"value": ""
		},
		{
			"key": "todos_id",
			"value": ""
		},
		{
			"key": "todos_status",
			"value": ""
		},
		{
			"key": "todos_title",
			"value": ""
		},
		{
			"key": "todos_user_id",
			"value": ""
		},
		{
			"key": "body",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "post_bodyPUT",
			"value": ""
		},
		{
			"key": "post_idPUT",
			"value": ""
		},
		{
			"key": "post_titlePUT",
			"value": ""
		},
		{
			"key": "post_user_idPUT",
			"value": ""
		},
		{
			"key": "putComme_body",
			"value": ""
		},
		{
			"key": "putComme_id",
			"value": ""
		},
		{
			"key": "putComme_title",
			"value": ""
		},
		{
			"key": "putComme_user_id",
			"value": ""
		},
		{
			"key": "putComme_email",
			"value": ""
		},
		{
			"key": "putComme_name",
			"value": ""
		},
		{
			"key": "putComme_post_id",
			"value": ""
		},
		{
			"key": "emailC",
			"value": ""
		},
		{
			"key": "nomeC",
			"value": ""
		},
		{
			"key": "todosput_due_on",
			"value": ""
		},
		{
			"key": "todosput_id",
			"value": ""
		},
		{
			"key": "todosput_status",
			"value": ""
		},
		{
			"key": "todosput_title",
			"value": ""
		},
		{
			"key": "todosput_user_id",
			"value": ""
		},
		{
			"key": "bodyPatch",
			"value": ""
		},
		{
			"key": "titlePatch",
			"value": ""
		},
		{
			"key": "userNameDelete",
			"value": ""
		},
		{
			"key": "userEmailDelete",
			"value": ""
		},
		{
			"key": "userBodyDelete",
			"value": ""
		},
		{
			"key": "userTitleDelete",
			"value": ""
		},
		{
			"key": "userUserIdDelete",
			"value": ""
		},
		{
			"key": "userIdComments",
			"value": ""
		},
		{
			"key": "postC_body",
			"value": ""
		},
		{
			"key": "postC_email",
			"value": ""
		},
		{
			"key": "postC_id",
			"value": ""
		},
		{
			"key": "postC_name",
			"value": ""
		},
		{
			"key": "postC_user_id",
			"value": ""
		},
		{
			"key": "del_due_on",
			"value": ""
		},
		{
			"key": "del_id",
			"value": ""
		},
		{
			"key": "del_status",
			"value": ""
		},
		{
			"key": "del_title",
			"value": ""
		},
		{
			"key": "del_user_id",
			"value": ""
		}
	]
}